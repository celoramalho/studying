Structured Query Language (SQL)

1. Principais Categorias de SQL


1.1. Data Definition Language (DDL)
Define ou altera a estrutura do banco de dados.

1.2. Data Manipulation Language (DML)
Manipula dados dentro das tabelas.

1.3. Data Query Language (DQL)
Consulta e recupera dados das tabelas.

1.4. Data Control Language (DCL)
Controla permissões e segurança do banco de dados.

1.5. Transaction Control Language (TCL)
Controla transações no banco de dados.



SGBDs


https://sqliteonline.com/
https://www.alura.com.br/artigos/o-que-e-sql


CREATE TABLE tabelaclientes(ID_Cliente INT PRIMARY KEY,
                            Nome_Cliente VARCHAR (250),
                            Informacoes_de_Contato VARCHAR (250));


SELECT * From tabelaclientes

ALTER TABLE tabelaclientes ADD Endereço_Cliente VARCHAR (250);

DROP TABLE tabelaclientes

CREATE TABLE tabelacategorias (ID_Categoria INT PRIMARY KEY, Nome_Categoria VARCHAR (250), Descricao_Categoria TEXT);

CREATE TABLE tabelaprodutos (
  ID_Produto INT PRIVATE KEY,
  Nome_do_Produto VARCHAR (250),
  Descrição TEXT,
  Categoria INT,
  Preco_da_Compra DECIMAL (10,2),
  Unidade VARCHAR (50),
  Fornecedor INT,
  Data_de_Inclusao DATE,
  FOREIGN KEY (Categoria) REFERENCES tabelacategorias (id_categoria),
  FOREIGN KEY (Fornecedor) REFERENCES tabelafornecedores (id));


SELECT * FROM tabelaprodutos;

Chave estrangeira sempre ligada a uma chave primária.


INSERT INTO tabelaclientes
(id_cliente,
 nome_cliente,
 informacoes_de_contato,
 Endereço_Cliente)
 VALUES
 ('1', 'Ana Silva', 'ana.silva@email.com', 'rua flores - casa 1')


 INSERT INTO tabelaclientes
(id_cliente,
 nome_cliente,
 informacoes_de_contato,
 Endereço_Cliente)
 VALUES
 ('2', 'Joao Santos', 'joao.santos@email.com', 'Rua dos Pinheiros, 25'),
 ('3', 'Maria Fernanda', 'maria.fernanda@email.com', 'Rua Santo Antonio, 10'),
 ('4', 'Carlos Pereira', 'carlos.pereira@email.com', 'Avenida Rio, 68');


 INSERT INTO tabelaclientes
(id_cliente,
 nome_cliente,
 informacoes_de_contato,
 Endereço_Cliente)
 VALUES
('5', 'Patrícia Lima', 'patricia.lima@email.com', 'Rua das Flores, 123'),
('6', 'Rodrigo Almeida', 'rodrigo.almeida@email.com', 'Avenida Central, 456'),
('7', 'André Oliveira',	 'andre.oliveira@email.com', 'Travessa do Sol, 789'),
('8', 'Isabela Rodrigues',	 'isabela.rodrigues@email.com', 'Rua da Paz, 321'),
('9', 'Ricardo Sousa',	 'ricardo.sousa@email.com', 'Alameda dos Sonhos, 654'),
('10', 'Luana Gomes', 'luana.gomes@email.com', 'Praceta das Estrelas, 987'),
('11', 'Juliano Costa', 'juliano.costa@email.com', 'Av. Principal, 234'),
('12', 'Sandra Ferreira', 'sandra.ferreira@email.com', 'Rua da Liberdade, 567'),
('13', 'Roberto Barbosa', 'roberto.barbosa@email.com', 'Rua da Esquina, 432'),
('14',	 'Alice Santos', 'alice.santos@email.com', 'Largo da Amizade, 765'),
('15',	 'Gustavo Lima', 'gustavo.lima@email.com', 'Avenida das Árvores, 876'),
('16',	 'Carla Silva', 'carla.silva@email.com', 'Travessa das Aves, 345'),
('17',	 'Daniel Oliveira', 'daniel.oliveira@email.com', 'Alameda dos Bosques, 678'),
('18',	 'Luciana Almeida', 'luciana.almeida@email.com', 'Rua das Colinas, 123'),
('19',	 'Fernando Pereira', 'fernando.pereira@email.com', 'Avenida das Ondas, 987'),
('20',	 'Marina Lima', 'marina.lima@email.com', 'Praceta dos Girassóis, 456'),
('21',	 'Lucas Rodrigues', 'lucas.rodrigues@email.com', 'Rua das Montanhas, 321'),
('22',	 'Adriana Sousa', 'adriana.sousa@email.com', 'Travessa dos Rios, 654'),
('23',	 'Eduardo Gomes', 'eduardo.gomes@email.com', 'Avenida das Pedras, 789'),
('24',	 'Marcia Costa', 'marcia.costa@email.com', 'Largo das Praias, 234'),
('25',	 'José Silva', 'jose.silva@email.com', 'Av. dos Ventos, 432'),
('26',	 'Beatriz Alves', 'beatriz.alves@email.com', 'Rua dos Coqueiros, 765'),
('27',	 'André Santos', 'andre.santos@email.com', 'Avenida dos Lagos, 876'),
('28',	 'Carolina Lima', 'carolina.lima@email.com', 'Travessa das Neves, 345'),
('29',	 'Fábio Rodrigues',	 'fabio.rodrigues@email.com', 'Alameda dos Campos, 678'),
('30',	 'Larissa Pereira',	 'larissa.pereira@email.com', 'Rua dos Bosques, 123');


CREATE TABLE tabelapedidosgold (
  ID_pedido_gold INT PRIMARY KEY,
  Data_Do_Pedido_gold DATE,
  Status_gold VARCHAR(50),
  Total_Do_Pedido_gold DECIMAL(10, 2),
  Cliente_gold INT,
  Data_De_Envio_Estimado_gold DATE,
  FOREIGN KEY (cliente_gold) REFERENCES tabelaclientes(id_cliente)
  );


  INSERT INTO tabelapedidosgold
(id_pedido_gold,
 Data_do_pedido_gold,
 status_gold,
 total_do_pedido_gold,
 cliente_gold,
 data_de_envio_estimado_gold)
 SELECT
 id,
  data_do_pedido,
  status,
  total_do_pedido,
  cliente,
  data_de_envio_estimada
  FROM tabelapedidos
  WHERE total_do_pedido >= 400;
  
  
  SELECT * FROM tabelapedidosgold


  CREATE TABLE tabelafuncionarios (
  ID VARCHAR(10) PRIMARY KEY,
  Nome VARCHAR(100),
  Cargo VARCHAR(80),
  Departamento TEXT,
  Data_de_Contratação DATE,
  Salario DECIMAL(10,2));
  
 SELECT * FROM tabelafuncionarios
 
DROP TABLE tabelafuncionarios

INSERT INTO tabelafuncionarios (id, nome, cargo, departamento, data_de_contratação, salario)
VALUES
('32D', 'João Silva', 'Desenvolvedor de Software', 'TI', '2023-10-24', 6000.00);
 
 
 ALTER TABLE tabelafuncionarios
 	ALTER COLUMN Departamento TEXT not NULL;

    SELECT * FROM tabelapedidos WHERE total_do_pedido = 200;
    <> <= >= > <

SELECT * FROM tabelaclientes WHERE nome_cliente > 'C';

SELECT * FROM Clientes WHERE Idade > 30 AND Sexo <> 'Masculino';

SELECT * FROM Produtos WHERE Nome LIKE 'computador';

SELECT * FROM tabelapedidos WHERE data_de_envio_estimada BETWEEN '2023-08-01' AND '2023-09-01';


SELECT * FROM tabelaprodutos WHERE preco_da_compra BETWEEN 200 AND 600 ORDER BY nome_do_produto;

SELECT * fROM tabelaprodutos WHERE preco_da_compra BETWEEN 200 AND 600 ORDER BY fornecedor DESC;

select informacoes_de_contato as email_cliente FROM tabelaclientes;

UPDATE tabelapedidosgold SET Status_gold = 'Enviado' WHERE Status_gold = 'Processando';

SELECT * FROM tabelapedidosgold;

UPDATE tabelaclientes SET informacoes_de_contato = 'j.santos@email.com', endereço_cliente = 'rua dos paralelepipedos, 37' WHERE id_cliente = 2;

SELECT * FROM tabelaclientes;

DELETE FROM tabelafornecedores WHERE país_de_origem = 'Turquia';

SELECT * FROM tabelafornecedores;

DELETE FROM tabelafornecedores WHERE id > 35;



delete cascade, exlusão em cascata
PRAGMA foreign_keys = ON;



CREATE TABLE tabelafuncionariosdesafio (id INT PRIMARY KEY,
                                        nome VARCHAR(100),
                                        departamento VARCHAR(100),
                                        salario FLOAT);

INSERT INTO tabelafuncionariosdesafio (id, nome,departamento, salario)
VALUES ('1', 'Hetor Vieira', 'Financeiro', 4959.22),
	   ('2', 'Daniel Campos', 'Vendas', 3884.44),
       ('3', 'Luiza Dias', 'TI', 8505.78),
       ('4', 'Davi Lucas Moraes', 'Financeiro', 8437.02),
       ('5', 'Pietro Cavalcanti', 'TI', 4946.88),
       ('6', 'Evelyn da Mata', 'Vendas', 5278.88),
       ('7', 'Isabella Rocha', 'Marketing', 4006.03),
       ('8', 'Sra. Manuela Azevedo', 'Vendas', 6101.88),
       ('9', 'Brenada Cardoso', 'TI', 8853.34),
       ('10', 'Danilo Souza', 'TI', 8242.14);
       
SELECT * FROM tabelafuncionariosdesafio;

SELECT * FROM tabelafuncionariosdesafio WHERE salario > 5000;

SELECT DISTINCT departamento FROM tabelafuncionariosdesafio;

DELETE FROM tabelafuncionariosdesafio WHERE salario < 4000;

SELECT * FROM tabelafuncionariosdesafio WHERE departamento = 'Vendas' AND salario >= 6000;

DROP TABLE tabelafuncionariosdesafio;

https://cursos.alura.com.br/course/sqlite-online-conhecendo-instrucoes-sql/task/160998

UPDATE VENDEDORES
SET COMISSÃO  = COMISSÃO + 0.03
WHERE COMISSÃO = (SELECT min(COMISSÃO) FROM VENDEDORES)




SELECT cargo, COUNT(*) qtd FROM HistoricoEmprego GROUP BY cargo HAVING qtd >=2;

SELECT nome, LENGTH(cpf) qtd FROM Colaboradores WHERE qtd = 11;


SELECT count(*), length(cpf) qtd FROM Colaboradores WHERE qtd = 11;

SELECT ('A pessoa colaboradora ' || nome || ' de CPF ' || cpf || ' possui o seguinte endereço: ' || endereco) AS TEXTO FROM Colaboradores;
UPPER e LOWER

SELECT AVG(faturamento_bruto), ROUND (AVG(faturamento_bruto),2) from faturamento;

SELECT id_colaborador, cargo, salario,
CASE
	WHEN salario < 3000 THEN 'Baixo'
    WHEN salario BETWEEN 3000 AND 6000 THEN 'Médio'
    ELSE 'Alto'
    END AS Categoria_salario
   FROM HistoricoEmprego;